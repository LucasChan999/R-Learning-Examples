installed.packages() # List all "attached" or loaded packages. search()
suppressWarnings(   if (!require("RevoScaleR")) {     cat(         "RevoScaleR package does not seem to exist. \n",         "This means that the functions starting with 'rx' will not run. \n",         "If you have Microsoft R Server installed, please switch the R engine.\n",         "For example, in R Tools for Visual Studio: \n",         "R Tools -> Options -> R Engine. \n",         "If Microsoft R Server is not installed, you can download it from: \n",         "https://www.microsoft.com/en-us/server-cloud/products/r-server/")       quit() })
if (!require("version.compare")) {     (if (!require("devtools")) install.packages("devtools"))     library("devtools")     devtools::install_github("andrie/version.compare") } library(version.compare)
if (!require("version.compare")) {     (if (!require("devtools")) install.packages("devtools"))     library("devtools")     devtools::install_github("andrie/version.compare") }
suppressWarnings(   if (!require("RevoScaleR")) {     cat(         "RevoScaleR package does not seem to exist. \n",         "This means that the functions starting with 'rx' will not run. \n",         "If you have Microsoft R Server installed, please switch the R engine.\n",         "For example, in R Tools for Visual Studio: \n",         "R Tools -> Options -> R Engine. \n",         "If Microsoft R Server is not installed, you can download it from: \n",         "https://www.microsoft.com/en-us/server-cloud/products/r-server/")       quit() })
if (!require("version.compare")) {     (if (!require("devtools")) install.packages("devtools"))     library("devtools")     devtools::install_github("andrie/version.compare") }
library(version.compare) cat("This script can take several minutes to run.\n") cat("Make yourself comfortable.\n")
r <- findRscript(   version = as.character(getRversion()) )
threadsToTest <- if (exists("setMKLthreads")) {     local({         threads <- 2 ^ (0:4)         max <- match(RevoUtilsMath:::.Default.Revo.Threads, threads)         threads[seq_len(max)]     }) } else {     1 }
scale.factor <- 0.25 x <- RevoMultiBenchmark(r, threads = threadsToTest, scale.factor = scale.factor)
scale.factor <- 0.25 x <- RevoMultiBenchmark(r, threads = threadsToTest, scale.factor = scale.factor) # Print a table of results. print(x) # Create a plot. p <- plot(x, theme_size = 12) print(p)
scale.factor
x
help(RevoM)
help(RevoMultiBenchmark)
threadsToTest
r
suppressWarnings(     if (!require("ggplot2", quietly = TRUE)) install.packages("ggplot2", quiet = TRUE))
suppressWarnings(     if (!require("mapproj", quietly = TRUE)) install.packages("mapproj", quiet = TRUE))     #options(warn = 0)
suppressWarnings( ? quakes)
str(quakes)
theme_set(theme_gray(base_size = 18))
p0 <- ggplot(quakes, aes(x = long, y = lat)) +     geom_point() +     coord_map() p0
p0 <- ggplot(quakes, aes(x = long, y = lat)) +     geom_point() +     coord_map() p0
suppressWarnings(     if (!require("ggplot2", quietly = TRUE)) install.packages("ggplot2", quiet = TRUE))     # mapproj is required for map projections.     suppressWarnings(     if (!require("mapproj", quietly = TRUE)) install.packages("mapproj", quiet = TRUE))     #options(warn = 0) library("ggplot2", quietly = TRUE)     library("mapproj", quietly = TRUE) # R 有大量的内置数据集 # 在这个实例中你将使用数据集 quakes. # 这一数据包含了斐济（Fiji）地震的地点. # 打开R help窗口查看quakes的信息 suppressWarnings( ? quakes) # Inspect the structure of the data (a data frame with 5 columns).     # 观察数据的结构（5列的data frame）     str(quakes) # 设定字体，内容更加清晰 theme_set(theme_gray(base_size = 18))     suppressWarnings(     if (!require("ggplot2", quietly = TRUE)) install.packages("ggplot2", quiet = TRUE))     # mapproj is required for map projections.     suppressWarnings(     if (!require("mapproj", quietly = TRUE)) install.packages("mapproj", quiet = TRUE))     #options(warn = 0) library("ggplot2", quietly = TRUE)     library("mapproj", quietly = TRUE) # R 有大量的内置数据集 # 在这个实例中你将使用数据集 quakes. # 这一数据包含了斐济（Fiji）地震的地点. # 打开R help窗口查看quakes的信息 suppressWarnings( ? quakes) # Inspect the structure of the data (a data frame with 5 columns).     # 观察数据的结构（5列的data frame）     str(quakes) # 设定字体，内容更加清晰 theme_set(theme_gray(base_size = 18))
p0 <- ggplot(quakes, aes(x = long, y = lat)) +     geom_point() +     coord_map() p0
p1 <- ggplot(quakes, aes(x = long, y = lat)) +     geom_point(aes(colour = depth)) +     coord_map() p1
p1 <- ggplot(quakes, aes(x = long, y = lat)) +     geom_point(aes(colour = depth))  p1
p1 <- ggplot(quakes, aes(x = long, y = lat)) +     geom_point(aes(colour = depth)) +     coord_map() p1
quakes
str(quakes)
p2 <- ggplot(quakes, aes(x = long, y = lat)) +     geom_point(aes(colour = depth, size = mag)) +     coord_map() p2
str(quakes)
coord_map()
p2<- ggplot(quake)
p2<- ggplot(quakes,aes(x = long,y = lat))
p2
p2<- ggplot(quakes,aes(x = long,y = lat))+geom_point()+coord_map()
p2
p2<- ggplot(quakes,aes(x = long,y = lat))+geom_point()
p2
p2<- ggplot(quakes,aes(x = long,y = lat))+coord_map()
p2
p1
p2<- ggplot(quakes,aes(x = long,y = lat))+geom_point(aes (colour = size))+ coord_map()
p2
p2<- ggplot(quakes,aes(x = long,y = lat))+geom_point(aes (colour = mag))+ coord_map()
p2
p2<- ggplot(quakes,aes(x = long,y = lat))+geom_point(aes (colour = mag,size = depth))+ coord_map()
p2
p1
p1 <- ggplot(quakes, aes(x = long, y = lat)) +     geom_point(aes(colour = depth)) +     coord_map() p1
p2 <- ggplot(quakes, aes(x = long, y = lat)) +     geom_point(aes(colour = depth, size = mag)) +     coord_map() p2
p3 <- ggplot(quakes, aes(x = long, y = lat)) +     geom_point(aes(colour = depth, size = mag), alpha = 0.25) +     coord_map() p3
p4 <- ggplot(quakes, aes(x = long, y = lat)) +     geom_point(aes(colour = depth, size = mag), alpha = 0.25) +     coord_map() +     scale_colour_gradient(low = "blue", high = "red") p4
p5 <- ggplot(quakes, aes(x = long, y = lat)) +     geom_point(aes(colour = depth, size = mag), alpha = 0.25) +     scale_colour_gradient(low = "blue", high = "red") +     ggtitle("Distribution of earthquakes near Fiji") +     coord_map() p5
theme_set(theme_grey(12) + theme(legend.key.size = unit(0.5, "lines")))
library(grid) plot.new() grid.draw(cbind(     ggplotGrob(p1),     ggplotGrob(p2),     ggplotGrob(p3),     size = "last"     ))
plot.new()
grid.draw(cbind(     ggplotGrob(p1),     ggplotGrob(p2),     ggplotGrob(p3),     size = "last"     ))
p1
help(coord_map())
help(coord_map)
